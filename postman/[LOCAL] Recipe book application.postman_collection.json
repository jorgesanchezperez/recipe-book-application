{
	"info": {
		"_postman_id": "ad89fb11-fc55-4389-afc9-66113ca5b4da",
		"name": "[LOCAL] Recipe book application",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25705538"
	},
	"item": [
		{
			"name": "Generic API",
			"item": [
				{
					"name": "welcome",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Response code is Success\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{HOST}}",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "discovery",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Response code is Success\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{HOST}}/discovery",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"discovery"
							]
						}
					},
					"response": []
				},
				{
					"name": "health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Response code is Success\", function () {",
									"    pm.response.to.have.body(\"success\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{HOST}}/health",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rules API",
			"item": [
				{
					"name": "INVALID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"reference\": \"unknown-reference\",\"who\": \"HUSBAND\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{HOST}}/rules",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Husband \"< 2\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"reference\": \"Husband-12345A\",\"who\": \"HUSBAND\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{HOST}}/rules",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Husband \"= 2\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"reference\": \"Husband-22345A\",\"who\": \"HUSBAND\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{HOST}}/rules",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Husband \"> 2\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"reference\": \"Husband-32345A\",\"who\": \"HUSBAND\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{HOST}}/rules",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grandson \"< 2\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"reference\": \"Grandson-12345A\",\"who\": \"GRANDSON\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{HOST}}/rules",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grandson \"= 2\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"reference\": \"Grandson-22345A\",\"who\": \"GRANDSON\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{HOST}}/rules",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grandson \"> 2\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"reference\": \"Grandson-32345A\",\"who\": \"GRANDSON\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{HOST}}/rules",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Daughter \"< 2\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"reference\": \"Daughter-12345A\",\"who\": \"DAUGHTER\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{HOST}}/rules",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Daughter \"> 2\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"reference\": \"Daughter-32345A\",\"who\": \"DAUGHTER\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{HOST}}/rules",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Daughter \"= 2\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"reference\": \"Daughter-22345A\",\"who\": \"DAUGHTER\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{HOST}}/rules",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"rules"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Recipe Api",
			"item": [
				{
					"name": "Not implemented yet",
					"item": [
						{
							"name": "Update Recipe by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 501\", function () {",
											"    pm.response.to.have.status(501);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Response code is ERROR\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check the exception response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.exception.errorCode).to.equal(\"BOOK.APP::REST.Endpoint.Not.Implemented.Yet\");",
											"    pm.expect(jsonData.exception.reason).to.equal(\"Operation update not implemented yet\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Fry an egg, recipe from postman\",\n    \"link\": \"https://www.youtube.com/watch?v=vjMPZnn7eHo\",\n    \"portions\": 1,\n    \"prepare_time\": 2,\n    \"meal\": \"lunch\",\n    \"ingredients\": [\n        {\n            \"name\": \"Chicken eggs\",\n            \"amount\": 2,\n            \"unit\": \"units\"\n        },\n        {\n            \"name\": \"olive oil\",\n            \"amount\": 10,\n            \"unit\": \"centiliters\"\n        }\n    ],\n    \"members\": [\n        {\n            \"member\": \"GRANDSON\"\n        },\n        {\n            \"member\": \"HUSBAND\"\n        },\n        {\n            \"member\": \"DAUGHTER\"\n        }\n    ],\n    \"instructions\": \"Put the olive oil in the fryed pan, wait until the oil is hot and break the egg into the pan, do it what you like\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}/recipes/update/RECIPE-ID",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"recipes",
										"update",
										"RECIPE-ID"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete recipe by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 501\", function () {",
											"    pm.response.to.have.status(501);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Response code is ERROR\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check the exception response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.exception.errorCode).to.equal(\"BOOK.APP::REST.Endpoint.Not.Implemented.Yet\");",
											"    pm.expect(jsonData.exception.reason).to.equal(\"Operation update not implemented yet\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Fry an egg, recipe from postman\",\n    \"link\": \"https://www.youtube.com/watch?v=vjMPZnn7eHo\",\n    \"portions\": 1,\n    \"prepare_time\": 2,\n    \"meal\": \"lunch\",\n    \"ingredients\": [\n        {\n            \"name\": \"Chicken eggs\",\n            \"amount\": 2,\n            \"unit\": \"units\"\n        },\n        {\n            \"name\": \"olive oil\",\n            \"amount\": 10,\n            \"unit\": \"centiliters\"\n        }\n    ],\n    \"members\": [\n        {\n            \"member\": \"GRANDSON\"\n        },\n        {\n            \"member\": \"HUSBAND\"\n        },\n        {\n            \"member\": \"DAUGHTER\"\n        }\n    ],\n    \"instructions\": \"Put the olive oil in the fryed pan, wait until the oil is hot and break the egg into the pan, do it what you like\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}/recipes/delete/RECIPE-ID",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"recipes",
										"delete",
										"RECIPE-ID"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete All Recipes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 501\", function () {",
											"    pm.response.to.have.status(501);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Response code is ERROR\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check the exception response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.exception.errorCode).to.equal(\"BOOK.APP::REST.Endpoint.Not.Implemented.Yet\");",
											"    pm.expect(jsonData.exception.reason).to.equal(\"Operation update not implemented yet\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{HOST}}/recipes/delete/all",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"recipes",
										"delete",
										"all"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Response code is Success\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{HOST}}/recipes/all",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"recipes",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by partial name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Response code is Success\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SUCCESS\");",
									"});",
									"// pm.test(\"Check length data\", function () {",
									"//     var jsonData = pm.response.json();",
									"//     pm.expect(jsonData.data.length).to.eql(3);",
									"// });",
									"// pm.test(\"Check sort asc data\", function () {",
									"//     var jsonData = pm.response.json();",
									"//     pm.expect(jsonData.data[0].reference).to.eql(\"Husband-12345A\");",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{HOST}}/recipes/filter?name=bit",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"recipes",
								"filter"
							],
							"query": [
								{
									"key": "name",
									"value": "bit"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by partial name sort bu prepare time desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Response code is Success\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SUCCESS\");",
									"});",
									"// pm.test(\"Check length data\", function () {",
									"//     var jsonData = pm.response.json();",
									"//     pm.expect(jsonData.data.length).to.eql(3);",
									"// });",
									"// pm.test(\"Check sort desc data\", function () {",
									"//     var jsonData = pm.response.json();",
									"//     pm.expect(jsonData.data[0].reference).to.eql(\"Daughter-12345A\");",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{HOST}}/recipes/filter?name=bit&sort=desc",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"recipes",
								"filter"
							],
							"query": [
								{
									"key": "name",
									"value": "bit"
								},
								{
									"key": "sort",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Response code is Success\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SUCCESS\");",
									"});",
									"pm.test(\"Check the reference\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.reference).to.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Fry an egg, recipe from postman\",\n    \"link\": \"https://www.youtube.com/watch?v=vjMPZnn7eHo\",\n    \"portions\": 1,\n    \"prepare_time\": 2,\n    \"meal\": \"lunch\",\n    \"ingredients\": [\n        {\n            \"name\": \"Chicken eggs\",\n            \"amount\": 2,\n            \"unit\": \"units\"\n        },\n        {\n            \"name\": \"olive oil\",\n            \"amount\": 10,\n            \"unit\": \"centiliters\"\n        }\n    ],\n    \"members\": [\n        {\n            \"member\": \"GRANDSON\"\n        },\n        {\n            \"member\": \"HUSBAND\"\n        },\n        {\n            \"member\": \"DAUGHTER\"\n        }\n    ],\n    \"instructions\": \"Put the olive oil in the fryed pan, wait until the oil is hot and break the egg into the pan, do it what you like\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{HOST}}/recipes/add",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"recipes",
								"add"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Ingredient Api",
			"item": [
				{
					"name": "Not implemented yet",
					"item": [
						{
							"name": "Update ingredient by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 501\", function () {",
											"    pm.response.to.have.status(501);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Response code is ERROR\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check the exception response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.exception.errorCode).to.equal(\"BOOK.APP::REST.Endpoint.Not.Implemented.Yet\");",
											"    pm.expect(jsonData.exception.reason).to.equal(\"Operation update not implemented yet\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Chicken eggs\",\n    \"amount\": 2,\n    \"unit\": \"units\",\n    \"recipe_id\": \"Husband-12345A\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}/ingredients/update/INGREDIENT-ID",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"ingredients",
										"update",
										"INGREDIENT-ID"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete ingredient by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 501\", function () {",
											"    pm.response.to.have.status(501);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Response code is ERROR\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check the exception response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.exception.errorCode).to.equal(\"BOOK.APP::REST.Endpoint.Not.Implemented.Yet\");",
											"    pm.expect(jsonData.exception.reason).to.equal(\"Operation update not implemented yet\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Chicken eggs\",\n    \"amount\": 2,\n    \"unit\": \"units\",\n    \"recipe_id\": \"Husband-12345A\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}/ingredients/delete/INGREDIENT-ID",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"ingredients",
										"delete",
										"INGREDIENT-ID"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete All Ingredients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 501\", function () {",
											"    pm.response.to.have.status(501);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Response code is ERROR\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check the exception response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.exception.errorCode).to.equal(\"BOOK.APP::REST.Endpoint.Not.Implemented.Yet\");",
											"    pm.expect(jsonData.exception.reason).to.equal(\"Operation update not implemented yet\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{HOST}}/ingredients/delete/all",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"ingredients",
										"delete",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Ingredient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 501\", function () {",
											"    pm.response.to.have.status(501);",
											"});",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"pm.test(\"Response code is ERROR\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"ERROR\");",
											"});",
											"pm.test(\"Check the exception response\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.exception.errorCode).to.equal(\"BOOK.APP::REST.Endpoint.Not.Implemented.Yet\");",
											"    pm.expect(jsonData.exception.reason).to.equal(\"Operation update not implemented yet\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Chicken eggs\",\n    \"amount\": 2,\n    \"unit\": \"units\",\n    \"recipe_id\": \"Husband-12345A\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{HOST}}/ingredients/add",
									"protocol": "http",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"ingredients",
										"add"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Response code is Success\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{HOST}}/ingredients/all",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"ingredients",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by partial name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Response code is Success\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{HOST}}/ingredients/filter?name=c",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"ingredients",
								"filter"
							],
							"query": [
								{
									"key": "name",
									"value": "c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by partial name sort by name desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Response code is Success\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{HOST}}/ingredients/filter?name=c&sort=desc",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"ingredients",
								"filter"
							],
							"query": [
								{
									"key": "name",
									"value": "c"
								},
								{
									"key": "sort",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Application errors",
			"item": [
				{
					"name": "Filter: REST.query.params.not.supported",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Response code is ERROR\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"ERROR\");",
									"});",
									"pm.test(\"Check the exception response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.exception.errorCode).to.equal(\"BOOK.APP::REST.query.params.not.supported\");",
									"    pm.expect(jsonData.exception.reason).to.equal(\"Error parsing query parameters [wrongparameter]: query parameters accepted: name(value: alphanumeric values)(mandatory) and sort(value: asc | desc)(optional)\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{HOST}}/recipes/filter?wrongparameter=something",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"recipes",
								"filter"
							],
							"query": [
								{
									"key": "wrongparameter",
									"value": "something"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Rules: RULE.Not.Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Response code is ERROR\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"ERROR\");",
									"});",
									"pm.test(\"Check the exception response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.exception.errorCode).to.equal(\"BOOk.APP::RULE.Not.Found\");",
									"    pm.expect(jsonData.exception.reason).to.equal(\"Rule for [null] not found.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"reference\": \"Husband-12345A\",\"who\": \"SOMETHING\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{HOST}}/rules",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rules: RULE.Not.Found Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Check the response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.reference).to.equal(\"SOMETHING-12345A\");",
									"    pm.expect(jsonData.worth).to.equal(\"INVALID\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"reference\": \"SOMETHING-12345A\",\"who\": \"SOMETHING\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{HOST}}/rules",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "JPA error: DB.Operation.Failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Response code is ERROR\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"ERROR\");",
									"});",
									"pm.test(\"Check the exception response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.exception.errorCode).to.equal(\"BOOK.APP::DB.Operation.Failed\");",
									"    pm.expect(jsonData.exception.reason).to.equal(\"not-null property references a null or transient value : org.jsanchez.recipe.application.model.Member.member\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Fry an egg, recipe from postman\",\n    \"link\": \"https://www.youtube.com/watch?v=vjMPZnn7eHo\",\n    \"portions\": 1,\n    \"prepare_time\": 2,\n    \"meal\": \"lunch\",\n    \"ingredients\": [\n        {\n            \"name\": \"Chicken eggs\",\n            \"amount\": 2,\n            \"unit\": \"units\"\n        },\n        {\n            \"name\": \"olive oil\",\n            \"amount\": 10,\n            \"unit\": \"centiliters\"\n        }\n    ],\n    \"members\": [\n        {\n            \"member\": \"SOMETHING\"\n        }\n    ],\n    \"instructions\": \"Put the olive oil in the fryed pan, wait until the oil is hot and break the egg into the pan, do it what you like\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{HOST}}/recipes/add",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"recipes",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "JPA error: DB.Duplicate.Entry.Constraint.Violation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Response code is ERROR\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"ERROR\");",
									"});",
									"pm.test(\"Check the exception response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.exception.errorCode).to.equal(\"BOOK.APP::DB.Duplicate.Entry.Constraint.Violation\");",
									"    pm.expect(jsonData.exception.reason).to.equal(\"Constraint violation, a recipe with the same reference [Husband-12345A] exist.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reference\": \"Husband-12345A\",\n    \"name\": \"Fry an egg, recipe from postman\",\n    \"link\": \"https://www.youtube.com/watch?v=vjMPZnn7eHo\",\n    \"portions\": 1,\n    \"prepare_time\": 2,\n    \"meal\": \"lunch\",\n    \"ingredients\": [\n        {\n            \"name\": \"Chicken eggs\",\n            \"amount\": 2,\n            \"unit\": \"units\"\n        },\n        {\n            \"name\": \"olive oil\",\n            \"amount\": 10,\n            \"unit\": \"centiliters\"\n        }\n    ],\n    \"members\": [\n        {\n            \"member\": \"HUSBAND\"\n        }\n    ],\n    \"instructions\": \"Put the olive oil in the fryed pan, wait until the oil is hot and break the egg into the pan, do it what you like\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{HOST}}/recipes/add",
							"protocol": "http",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"recipes",
								"add"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}